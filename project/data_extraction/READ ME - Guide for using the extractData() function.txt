Guide for using the extractData() function.


The output of the function is a DataFrame with the following features (variables) with the mentioned data types:

1- pointID: the point id (aka the target feature)
	- type: object/str
	- ex: p:dmc_All:r:2ddf07d5-ef59ca94

2- unit: string with the unit
	- type: object/str
	- ex: Â°C

3- dqType: type of data quality issue
	- type: object/str	
	- ex: "Nulls"

4- dqStart: start of data quality issue
	- type: datetime64
	- ex: 2023-03-12 01:05:00+04:00

5- dqDuration: duration of data quality issue
	- type: timedelta64
	- ex: 0 days 00:35:10

6- pointInterval: logging interval of the point
	- type: timedelta64
	- ex: 0 days 00:05:00

7- features: list of point IDs of model features
	- type: object/str
	- ex: [p:dmc_All:r:2ddf07d5-ef59ca94, p:dmc_All:r:2ddf07d5-ef59ca94]

8- his: hisGrid with target variable and features (if any)
	- type: <class 'hxpy.haystack.grid.Grid>
	- this is converted to a DataFrame in the ensemble function
	*** TO CONVERT to df, apply .to_dataframe() in your model functions



** Note: Converting the his grid to DataFrame in the extractData() function causes compatibility issues in SS -- returns this in SS=> val Number <?> . 
Therefore the .to_dataframe() method has to be applied in the model functions as part of preprocessing.

** Note: the default behavior of the .to_dataframe() method is to NOT SET THE "Timestamp" as index. This has to be done as part of preprocessing in the model functions if needed.